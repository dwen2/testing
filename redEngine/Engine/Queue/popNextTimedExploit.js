/*******************************************************************************
* File: popNextTimedExploit.js
* Summary: Searches the queue for the name of the next available exploit to try.
*
* ~~ Holiness to the Lord ~~
*******************************************************************************/

const symbols = require('../symbols');



/*******************************************************************************
* Function: popNextTimedExploit
* @returns: String name of the script to run, or symbol.noScript if none found.
* Summary: Checks the iterator to see if it is time to run the object pointed
*    to.  If not, the iterator moves to the next object.  If no objects are
*    ready to run, it returns symbols.noScript.
*******************************************************************************/
function popNextTimedExploit()
{
   console.log("inside popNextTimedExploit function"); 

   if (!queue.iter)
   {
      console.log("No queue iterator!!  Queue length: " + queue.length);
      return symbols.noScript;
   }

   const marker = queue.iter; // Tells us when we've come full circle.

   do // Loop until we find an object to return or we've tried everything.
   {
      if (queue.iter.time <= Date.now()) // Check if time to run.
      {
         let retObj = queue.iter;

         if (queue.length === 1) // Just get the one object.
         {
            queue.iter = null;
         }
         else // Remove the object being popped.
         {
            queue.iter = retObj.next;

            retObj.prev.next = retObj.next;
            retObj.next.prev = retObj.prev;
            retObj.prev = null;
            retObj.next = null;
         }

         --queue.length;
         return retObj.script;
      }

      queue.iter = queue.iter.next; // Not ready; move on to the next one.
   }
   while (queue.iter != marker) // Loop until we've checked them all.

   return symbols.noScript; // No ready scripts; return the symbol.
}

module.exports = popNextTimedExploit;
