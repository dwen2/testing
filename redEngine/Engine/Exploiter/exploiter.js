//Exploiter Function
//Recieve a JSON object/Name of Function to Run
//Based on the function parse the json object for specific information
//Send all this information to a lambda function, for that to run
//Return the information the lambda function returned to engine

//expObj will have the environment/type/target/name
//targetObj will have the url, IP, etc. that is the target of the attack

/*******************************************************************************
* Function: exploiter
* Description: Receive a JSON object about an exploit to execute.
*              Parse the json object for specific information, then send all
*              this information to a lambda function to run the exploit.
*              Return the information the lambda function returned to engine.
*
* @param expObj - Object containing the exploit to run and the target object.
*                 Object layout:
*                 targetObj - Object; contains the data known about the target.
*                 env - Symbol; the exploit language (Node, bash, etc.)
*                 type - Symbol; type of attack (SQL inject, CVE, buffer, etc.)
*                 target - Symbol; system attacked (IIS, PHPMyAdmin, SSH, etc.)
*                 name - String; the name of the script to run.
* @returns data - Object with (potentially) new data available from the exploit.
*******************************************************************************/
function exploiter (expObj) {
// For expObj
    //const obj = JSON.parse(expObj);
    //lambdaEnv = expbj.env;
    console.log('Running ' + expObj.env + ' Lambda Function');

    //Run the lambda function
    var AWS = require('aws-sdk');
    AWS.config.update({accessKeyId: akid, secretAccessKey: secret});  //Can't write them directly in.
    var lambda = new AWS.Lambda();
    var params = {
        FunctionName: expObj.env, /* required */  //python
        Export: expObj,  //parameters
        Payload: PAYLOAD_AS_A_STRING
    };

    lambda.invoke(params, function(err, data) {
        if (err) console.log(err, err.stack); // an error occurred
        else     console.log(data);           // successful response
        return data;                          //This returns the data from the lambda function
    });

}

module.exports=exploiter;