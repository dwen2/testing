//Exploiter Function
//Recieve a JSON object/Name of Function to Run
//Based on the function parse the json object for specific information
//Send all this information to a lambda function, for that to run
//Return the information the lambda function returned to engine

//expObj will have the environment/type/target/name
//targetObj will have the url, IP, etc. that is the target of the attack

/*******************************************************************************
* Function: exploiter
* Description: Receive a JSON object about an exploit to execute.
*              Parse the json object for specific information, then send all
*              this information to a lambda function to run the exploit.
*              Return the information the lambda function returned to engine.
*
* @param expObj - Object containing the exploit to run and the target object.
*                 Object layout:
*                 targetObj - Object; contains the data known about the target.
*                 env - Symbol; the exploit language (Node, bash, etc.)
*                 type - Symbol; type of attack (SQL inject, CVE, buffer, etc.)
*                 target - Symbol; system attacked (IIS, PHPMyAdmin, SSH, etc.)
*                 name - String; the name of the script to run.
* @returns data - Object with (potentially) new data available from the exploit.
*******************************************************************************/
function exploiter (expObj) {

  //parse the results from the scan script 
  //send the result to a new object "intelligent"

    console.log("inside new exploiter");

    var childProcess = require('child_process');

    function runScript(scriptPath, callBack) {
      var invoked = false;

      var process = childProcess.fork(scriptPath);

      process.on('error', function (err) {
        if (invoked) return;
        invoked = true;
        callBack(err);
      });

      // execute the callback once the process has finished running
      process.on('exit', function (code) {
        if (invoked) return;
        invoked = true;
        var err = code === 0 ? null : new Error('exit code ' + code);
        callBack(err);
      });
    }

    runScript('../Exploits/nmapJS.js', function (err) {
      if (err) throw err;
      console.log('Finished!');
    });

}

module.exports = exploiter;
